import streamlit as st
from notion_client import Client
import google.generativeai as genai

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="Painel de Roteiros", page_icon="üé¨", layout="wide")
st.title("ü§ñ Assistente de World-Building")

# --- Fun√ß√µes do Backend ---

# Fun√ß√£o para inicializar as conex√µes com as APIs de forma segura
def inicializar_conexoes():
    try:
        notion = Client(auth=st.secrets["NOTION_TOKEN"])
        genai.configure(api_key=st.secrets["GOOGLE_AI_KEY"])
        model = genai.GenerativeModel('gemini-2.5-flash-lite')
        return notion, model
    except Exception as e:
        st.error(f"Erro ao inicializar as conex√µes. Verifique seus segredos. Detalhes: {e}")
        return None, None

# Fun√ß√£o para encontrar todas as tabelas (j√° a t√≠nhamos)
def encontrar_tabelas(notion_client, bloco_id):
    tabelas = {}
    try:
        resposta = notion_client.blocks.children.list(block_id=bloco_id)
        for bloco in resposta["results"]:
            if bloco["type"] == "child_database":
                tabelas[bloco["child_database"]["title"]] = bloco["id"]
            elif bloco["type"] == "child_page":
                tabelas.update(encontrar_tabelas(notion_client, bloco["id"]))
    except Exception as e:
        st.warning(f"N√£o foi poss√≠vel ler uma sub-p√°gina. Erro: {e}")
    return tabelas

# --- In√≠cio da Interface do App ---

# Inicializa as conex√µes
notion, model = inicializar_conexoes()

if notion and model:
    # Pega o ID da p√°gina principal dos segredos
    page_id = st.secrets["PAGE_ID"]

    # Encontra todas as tabelas e as coloca em um menu
    lista_de_tabelas = encontrar_tabelas(notion, page_id)

    if lista_de_tabelas:
        st.sidebar.header("M√≥dulos de Gera√ß√£o")
        tabela_selecionada = st.sidebar.selectbox(
            "Escolha a tabela que deseja preencher:",
            options=list(lista_de_tabelas.keys())
        )

        # --- M√≥dulo: Gerador de Op√ß√µes para "Sistemas de Magia" ---
        if tabela_selecionada == "Sistemas de Magia":
            st.header("üîÆ Gerador de Op√ß√µes para 'Sistemas de Magia'")
            st.info("Esta ferramenta usa a IA para sugerir op√ß√µes para o campo 'Fonte de Poder'.")

            tema = st.text_input("D√™ um tema ou conceito para guiar a IA (opcional):", placeholder="Ex: Magia baseada em emo√ß√µes, tecnologia antiga...")

            if st.button("Gerar Sugest√µes de 'Fonte de Poder'"):
                with st.spinner("üß† A IA est√° pensando..."):
                    prompt = f"""
                    Liste 7 fontes de poder criativas e concisas para um sistema de magia de fantasia.
                    Se um tema for fornecido, baseie as sugest√µes nesse tema. Tema: '{tema}'.
                    Retorne apenas a lista, com um item por linha. N√£o adicione n√∫meros, marcadores ou texto extra.
                    """
                    ai_response = model.generate_content(prompt)
                    sugestoes = [linha.strip() for linha in ai_response.text.strip().split('\n') if linha.strip()]
                    # Guarda as sugest√µes na mem√≥ria da sess√£o para n√£o perd√™-las
                    st.session_state['sugestoes_magia'] = sugestoes

            # Se houver sugest√µes na mem√≥ria, exibe-as com caixas de sele√ß√£o
            if 'sugestoes_magia' in st.session_state:
                st.write("---")
                st.subheader("Sugest√µes Geradas:")
                selecionadas = []
                for sugestao in st.session_state['sugestoes_magia']:
                    if st.checkbox(sugestao, key=sugestao):
                        selecionadas.append(sugestao)

                st.write("---")
                if st.button("Salvar Op√ß√µes Selecionadas no Notion"):
                    if not selecionadas:
                        st.warning("Nenhuma op√ß√£o foi selecionada!")
                    else:
                        with st.spinner("üîÑ Atualizando sua base de dados no Notion..."):
                            try:
                                database_id = lista_de_tabelas[tabela_selecionada]
                                opcoes_formatadas = [{"name": nome_opcao} for nome_opcao in selecionadas]
                                notion.databases.update(
                                    database_id=database_id,
                                    properties={"Fonte de Poder": {"select": {"options": opcoes_formatadas}}}
                                )
                                st.success("‚úÖ Op√ß√µes salvas com sucesso no Notion!")
                                # Limpa a mem√≥ria para a pr√≥xima gera√ß√£o
                                del st.session_state['sugestoes_magia']
                            except Exception as e:
                                st.error(f"Erro ao salvar no Notion: {e}")
        else:
            st.info(f"O m√≥dulo para preencher a tabela '{tabela_selecionada}' ainda n√£o foi constru√≠do.")
    else:
        st.error("Nenhuma base de dados foi encontrada no seu projeto do Notion.")
